package internal

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func TestExample(t *testing.T) {
	t.Run("run example as test for coverage", func(t *testing.T) {
		// An EventData blob from the Events table in the Kobo eReader firmware.
		b, err := hex.DecodeString("0000000400000010005600690065007700540079007000650000000a00000000060054004f00430000003000450078007400720061004400610074006100520065006100640069006e006700530065007300730069006f006e00730000000200000000030000002e00450078007400720061004400610074006100520065006100640069006e0067005300650063006f006e0064007300000002000000000a00000028004500780074007200610044006100740061004400610074006500430072006500610074006500640000000a00000000280032003000310039002d00310031002d00320035005400300031003a00310037003a00310034005a")
		assert.NoError(t, err)

		r := bytes.NewBuffer(b)
		v, err := (&QDataStreamReader{
			Reader:    r,
			ByteOrder: binary.BigEndian,
		}).ReadQStringQVariantAssociative()
		assert.NoError(t, err)

		err = json.NewEncoder(os.Stdout).Encode(v)
		assert.NoError(t, err)

		if r.Len() != 0 {
			panic("not all read")
		}
	})

	t.Run("type 44 error", func(t *testing.T) {
		t.Skipf("for debug")

		b, err := hex.DecodeString("0000000500000010005600690065007700540079007000650000000a000000001600520065006100640069006e006700560069006500770000001e0053007400610072007400500065007200630065006e00740061006700650000000001ffffffff0000002c00500061006700650073005400750072006e00650064005400680069007300530065007300730069006f006e00000002000000000000000006004700410034000000080000000003000000120062006f006f006b005f00740079007000650000000a0000000018004e006f0074004d006f006e006500740069007a006500640000000e0062006f006f006b005f006900640000000a00000000140034003000370031003800360038003300300030000000160062006f006f006b005f0066006f0072006d006100740000000a000000001c0050004f0043004b00450054005f00410052005400490043004c0045000000160043006f006e00740065006e007400540079007000650000000c000000001e6170706c69636174696f6e2f782d6b6f626f2d68746d6c2b706f636b6574")
		assert.NoError(t, err)

		r := bytes.NewBuffer(b)
		v, err := (&QDataStreamReader{
			Reader:    r,
			ByteOrder: binary.BigEndian,
		}).ReadQStringQVariantAssociative()
		assert.Error(t, err) // Expecting an error

		fmt.Println(v)
	})
}
